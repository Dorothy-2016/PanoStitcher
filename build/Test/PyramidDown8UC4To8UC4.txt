int idx_row_low(int y, int last_row)
{
    return abs(y) % (last_row + 1);
}

int idx_row_high(int y, int last_row)
{
    return abs(last_row - (int)abs(last_row - y)) % (last_row + 1);
}

int idx_row(int y, int last_row)
{
    return idx_row_low(idx_row_high(y, last_row), last_row);
}

int idx_col_low(int x, int last_col)
{
    return abs(x) % (last_col + 1);
}

int idx_col_high(int x, int last_col)
{
    return abs(last_col - (int)abs(last_col - x)) % (last_col + 1);
}

int idx_col(int x, int last_col)
{
    return idx_col_low(idx_col_high(x, last_col), last_col);
}

int horiBorder(int p, int len)
{
    if( (unsigned)p < (unsigned)len )
        ;
    else
    {
        if( p < 0 )
            p -= ((p-len+1)/len)*len;
        if( p >= len )
            p %= len;
    }
    return p;
}

int vertBorder( int p, int len)
{
    if( (unsigned)p < (unsigned)len )
        ;
    else
    {
        if( len == 1 )
            return 0;
        do
        {
            if( p < 0 )
                p = -p;
            else
                p = len - 1 - (p - len) - 1;
        }
        while( (unsigned)p >= (unsigned)len );
    }
    return p;
}

inline uchar4 getSourceElem(__global uchar* data, int step, int row, int col)
{
    return ((__global uchar4*)(data + row * step))[col];
}

__kernel void pyrDownKernel(__global uchar * srcData, int srcRows, int srcCols, int srcStep, __global uchar *dstData, int dstRows, int dstCols, int dstStep)
{
    const int x = get_global_id(0);
    const int y = get_group_id(1);

    __local float4 smem[256 + 4];

    float4 sum;

    const int src_y = 2*y;
    const int last_row = srcRows - 1;
    const int last_col = srcCols - 1;

    float4 co1 = 0.375f;
    float4 co2 = 0.25f;
    float4 co3 = 0.0625f;

    if (src_y >= 2 && src_y < srcRows - 2 && x >= 2 && x < srcCols - 2)
    {
        sum =       co3 * convert_float4(getSourceElem(srcData, srcStep, src_y - 2, x));
        sum = sum + co2 * convert_float4(getSourceElem(srcData, srcStep, src_y - 1, x));
        sum = sum + co1 * convert_float4(getSourceElem(srcData, srcStep, src_y    , x));
        sum = sum + co2 * convert_float4(getSourceElem(srcData, srcStep, src_y + 1, x));
        sum = sum + co3 * convert_float4(getSourceElem(srcData, srcStep, src_y + 2, x));

        smem[2 + get_local_id(0)] = sum;

        if (get_local_id(0) < 2)
        {
            const int leftx = x - 2;

            sum =       co3 * convert_float4(getSourceElem(srcData, srcStep, src_y - 2, leftx));
            sum = sum + co2 * convert_float4(getSourceElem(srcData, srcStep, src_y - 1, leftx));
            sum = sum + co1 * convert_float4(getSourceElem(srcData, srcStep, src_y    , leftx));
            sum = sum + co2 * convert_float4(getSourceElem(srcData, srcStep, src_y + 1, leftx));
            sum = sum + co3 * convert_float4(getSourceElem(srcData, srcStep, src_y + 2, leftx));

            smem[get_local_id(0)] = sum;
        }

        if (get_local_id(0) > 253)
        {
            const int rightx = x + 2;

            sum =       co3 * convert_float4(getSourceElem(srcData, srcStep, src_y - 2, rightx));
            sum = sum + co2 * convert_float4(getSourceElem(srcData, srcStep, src_y - 1, rightx));
            sum = sum + co1 * convert_float4(getSourceElem(srcData, srcStep, src_y    , rightx));
            sum = sum + co2 * convert_float4(getSourceElem(srcData, srcStep, src_y + 1, rightx));
            sum = sum + co3 * convert_float4(getSourceElem(srcData, srcStep, src_y + 2, rightx));

            smem[4 + get_local_id(0)] = sum;
        }
    }
    else
    {
        int col = horiBorder(x, srcCols);

        sum =       co3 * convert_float4(getSourceElem(srcData, srcStep, vertBorder(src_y - 2, srcRows), col));
        sum = sum + co2 * convert_float4(getSourceElem(srcData, srcStep, vertBorder(src_y - 1, srcRows), col));
        sum = sum + co1 * convert_float4(getSourceElem(srcData, srcStep, vertBorder(src_y    , srcRows), col));
        sum = sum + co2 * convert_float4(getSourceElem(srcData, srcStep, vertBorder(src_y + 1, srcRows), col));
        sum = sum + co3 * convert_float4(getSourceElem(srcData, srcStep, vertBorder(src_y + 2, srcRows), col));

        smem[2 + get_local_id(0)] = sum;

        if (get_local_id(0) < 2)
        {
            const int left_x = x - 2;

            col = horiBorder(left_x, srcCols);

            sum =       co3 * convert_float4(getSourceElem(srcData, srcStep, vertBorder(src_y - 2, srcRows), col));
            sum = sum + co2 * convert_float4(getSourceElem(srcData, srcStep, vertBorder(src_y - 1, srcRows), col));
            sum = sum + co1 * convert_float4(getSourceElem(srcData, srcStep, vertBorder(src_y    , srcRows), col));
            sum = sum + co2 * convert_float4(getSourceElem(srcData, srcStep, vertBorder(src_y + 1, srcRows), col));
            sum = sum + co3 * convert_float4(getSourceElem(srcData, srcStep, vertBorder(src_y + 2, srcRows), col));

            smem[get_local_id(0)] = sum;
        }

        if (get_local_id(0) > 253)
        {
            const int right_x = x + 2;

            col = horiBorder(right_x, srcCols);

            sum =       co3 * convert_float4(getSourceElem(srcData, srcStep, idx_row(src_y - 2, srcRows), col));
            sum = sum + co2 * convert_float4(getSourceElem(srcData, srcStep, idx_row(src_y - 1, srcRows), col));
            sum = sum + co1 * convert_float4(getSourceElem(srcData, srcStep, idx_row(src_y    , srcRows), col));
            sum = sum + co2 * convert_float4(getSourceElem(srcData, srcStep, idx_row(src_y + 1, srcRows), col));
            sum = sum + co3 * convert_float4(getSourceElem(srcData, srcStep, idx_row(src_y + 2, srcRows), col));

            smem[4 + get_local_id(0)] = sum;
        }
    }

    barrier(CLK_LOCAL_MEM_FENCE);

    if (get_local_id(0) < 128)
    {
        const int tid2 = get_local_id(0) * 2;

        sum =       co3 * smem[2 + tid2 - 2];
        sum = sum + co2 * smem[2 + tid2 - 1];
        sum = sum + co1 * smem[2 + tid2    ];
        sum = sum + co2 * smem[2 + tid2 + 1];
        sum = sum + co3 * smem[2 + tid2 + 2];

        const int dst_x = (get_group_id(0) * get_local_size(0) + tid2) / 2;

        if (dst_x < dstCols)
            ((__global uchar4*)(dstData + y * dstStep))[dst_x] = convert_uchar4_sat_rte(sum);
    }
}